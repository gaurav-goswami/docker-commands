|-----------------------------------------Docker Commands 🐋-----------------------------------------|

👉🏻 Check docker version
docker -v or docker --version

👉🏻 Get docker info
docker info

👉🏻 Search for an image using CLI
docker search `image name` 
example :- docker search node

👉🏻 Pull image from docker registry
docker image pull `image name`:[TAG] ➡️ (or use the shorthand) docker pull `image name`:[TAG]
example :- docker pull node:latest  // docker will download the node image from the docker registry

👉🏻 Check images
docker images

👉🏻 List docker container
docker ps (this command will only show the running containers)
docker ps -a (this command will show both running and stopped containers)

👉🏻 Create and run container from a pulled image
docker run `image name`:[TAG]

example :- docker run node (** If we run the image using this command without adding the interactive mode then the container will exit immediately)
       |
       |----> ** Run the image in interactive mode ➡️ docker run -it `image name`:[TAG]
       |
       |----> ** Give name to your container ➡️ docker run -it --name `container name` `image name`:[TAG]
       |
       |----> ** Run container in background and print containerId (creates and exit the container immediately) ➡️ docker run -d `image name`:[TAG] [*Note-> When you run a container in detached mode using the -d flag, it means the container will run in the background and not hold your terminal session hostage. This is particularly useful for long-running processes such as servers, daemons, or applications that don't require direct interaction with the terminal.]
       |
       |----> ** Execute a command in a running container
                     |
                     |----> docker exec [OPTIONS] CONTAINER COMMAND  (this command will only work for a running container)
                            |
                            |-----> docker run --name `container name` -it -d (this will create a terminal session and will run the container in background) `image name`
                            |
                            |-----> docker run --name nodeContainer -it -d node
                                          |
                                          |----> example :- docker exec -it nodeContainer node
                           

👉🏻 Inspect a container
docker inspect `container id` (check the container id by running this command ➡️ docker ps -a) OR docker inspect `container name`

👉🏻 Stop a container
docker stop `container name` OR docker stop `container ID`

👉🏻 Start a container
docker start `container name` OR docker start `container ID`
 
👉🏻 Remove a container
docker rm `container name` OR docker rm `container ID` [the container should not be running]

👉🏻 Remove all containers
docker container prune

👉🏻 Remove an image
docker rmi `image name`
example :- docker rmi node

👉🏻 Adding an env variable (using -e)
// example :- using an env variable in mysql image
    |
    |-----> docker pull mysql
    |-----> docker run --name sqlContainer -d -e MYSQL_ROOT_PASSWORD=password mysql

👉🏻 Expose host PORT
docker run --name `container name` -p YOUR PORT:DOCKER PORT `image name`
     |
     |------> example :- docker pull nginx 
                 |
                 |-----> docker run --name nginxContainer -d -p 8080:80 nginx (now check your localhost:8080)

👉🏻 Creating our own docker image (add your node_modules[if any] in a .dockerignore file)
   |
   |---> create a file -> Dockerfile 
   |---> Add a base image ➡️ FROM baseImage 
   |---> Set the working directory ➡️ WORKDIR /app/src
   |---> Copy the files to the container ➡️ COPY . /app/src
   |---> Add the RUN command ➡️ RUN `Your command here` example :- RUN npm install
   |---> Run the files when container start ➡️ CMD[""] example :- CMD["node" , "index"]
   |
   |---> Build the image ➡️ docker build -t dockerhub username/imagename .

👉🏻 Push your image to hub.docker.com (create an account on hub.docker.com)
docker push dockerusername/image name
example :- docker push johndoe/practiceimage